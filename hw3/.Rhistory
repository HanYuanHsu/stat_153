err = c(-0.69, -4.26, 0.14, -0.86, 0.42, 24.21, 0.51, -1.23, 2.30, 4.15)
n = 5000
ktrue = 20
sigtrue = 75
betatrue = c(0, rep(5, ktrue), rep(5, ktrue))
tme = 1:n
dt = rep(-1, n)
Xtrue = matrix(1, n, 1+(2*ktrue))
for(j in 1:ktrue)
{
Xtrue[,(2*j)] = cos(2*pi*(j/n)*tme)
Xtrue[,((2*j)+1)] = sin(2*pi*(j/n)*tme)
}
dt = Xtrue %*% betatrue + sigtrue*rnorm(n)
plot(dt, type = "l")
plot(1:(n/2), abs(fft(dt)[2:((n/2)+1)])^2/n, type = "h", ylab = "Periodogram")
abline(h = 0)
K = 50
C = 50
logevid.noprior = rep(-1, K)
logevid = rep(-1, K)
Xin = matrix(1, n, 1)
for(kin in 1:K)
{
Xin = cbind(Xin, cos(2*pi*(kin/n)*tme), sin(2*pi*(kin/n)*tme))
mod = lm(dt ~ -1 + Xin)
p = ncol(Xin)
log.value = ((p - n)/2)*(log(sum(mod$residuals^2))) - (0.5*(determinant(t(Xin) %*% Xin, logarithm = T)$modulus)) + ((p/2)*(log(pi))) + lgamma((n-p)/2)
logevid.noprior[kin] = log.value
log.value = log.value - p*(log(2*C))
logevid[kin] = log.value
}
cbind(logevid.noprior, logevid)
plot(logevid.noprior, type = "l")
abline(v = 20)
logevid = logevid - max(logevid)
evid = exp(logevid)
evid = evid/(sum(evid))
plot(1:K, evid, type = "h")
K = 50
C = 500
logevid.noprior = rep(-1, K)
logevid = rep(-1, K)
Xin = matrix(1, n, 1)
for(kin in 1:K)
{
Xin = cbind(Xin, cos(2*pi*(kin/n)*tme), sin(2*pi*(kin/n)*tme))
mod = lm(dt ~ -1 + Xin)
p = ncol(Xin)
log.value = ((p - n)/2)*(log(sum(mod$residuals^2))) - (0.5*(determinant(t(Xin) %*% Xin, logarithm = T)$modulus)) + ((p/2)*(log(pi))) + lgamma((n-p)/2)
logevid.noprior[kin] = log.value
log.value = log.value - p*(log(2*C))
logevid[kin] = log.value
}
cbind(logevid.noprior, logevid)
plot(logevid.noprior, type = "l")
abline(v = 20)
logevid = logevid - max(logevid)
evid = exp(logevid)
evid = evid/(sum(evid))
plot(1:K, evid, type = "h")
K = 50
C = 5000
logevid.noprior = rep(-1, K)
logevid = rep(-1, K)
Xin = matrix(1, n, 1)
for(kin in 1:K)
{
Xin = cbind(Xin, cos(2*pi*(kin/n)*tme), sin(2*pi*(kin/n)*tme))
mod = lm(dt ~ -1 + Xin)
p = ncol(Xin)
log.value = ((p - n)/2)*(log(sum(mod$residuals^2))) - (0.5*(determinant(t(Xin) %*% Xin, logarithm = T)$modulus)) + ((p/2)*(log(pi))) + lgamma((n-p)/2)
logevid.noprior[kin] = log.value
log.value = log.value - p*(log(2*C))
logevid[kin] = log.value
}
cbind(logevid.noprior, logevid)
plot(logevid.noprior, type = "l")
abline(v = 20)
logevid = logevid - max(logevid)
evid = exp(logevid)
evid = evid/(sum(evid))
plot(1:K, evid, type = "h")
K = 50
C = 100
logevid.noprior = rep(-1, K)
logevid = rep(-1, K)
Xin = matrix(1, n, 1)
for(kin in 1:K)
{
Xin = cbind(Xin, cos(2*pi*(kin/n)*tme), sin(2*pi*(kin/n)*tme))
mod = lm(dt ~ -1 + Xin)
p = ncol(Xin)
log.value = ((p - n)/2)*(log(sum(mod$residuals^2))) - (0.5*(determinant(t(Xin) %*% Xin, logarithm = T)$modulus)) + ((p/2)*(log(pi))) + lgamma((n-p)/2)
logevid.noprior[kin] = log.value
log.value = log.value - p*(log(2*C))
logevid[kin] = log.value
}
cbind(logevid.noprior, logevid)
plot(logevid.noprior, type = "l")
abline(v = 20)
logevid = logevid - max(logevid)
evid = exp(logevid)
evid = evid/(sum(evid))
plot(1:K, evid, type = "h")
n = 5000
ktrue = 20
sigtrue = 75
betatrue = c(0, rep(5, ktrue), rep(5, ktrue))
tme = 1:n
dt = rep(-1, n)
Xtrue = matrix(1, n, 1+(2*ktrue))
for(j in 1:ktrue)
{
Xtrue[,(2*j)] = cos(2*pi*(j/n)*tme)
Xtrue[,((2*j)+1)] = sin(2*pi*(j/n)*tme)
}
dt = Xtrue %*% betatrue + sigtrue*rnorm(n)
plot(dt, type = "l")
K = 50
C = 25  #play around with various values of C and convince yourself that the answers change quite a bit depending on the specific value of C
logevid = rep(-1, K)
Xin = matrix(1, n, 1)
for(kin in 1:K)
{
Xin = cbind(Xin, cos(2*pi*(kin/n)*tme), sin(2*pi*(kin/n)*tme))
mod = lm(dt ~ -1 + Xin)
p = ncol(Xin)
log.value = ((p - n)/2)*(log(sum(mod$residuals^2))) - (0.5*(determinant(t(Xin) %*% Xin, logarithm = T)$modulus)) + ((p/2)*(log(pi))) + lgamma((n-p)/2)
log.value = log.value - p*(log(2*C))
logevid[kin] = log.value
}
logevid = logevid - max(logevid)
evid = exp(logevid)
evid = evid/(sum(evid))
plot(1:K, evid, type = "h")
which.max(evid)
evid[which.max(evid)]
#The most important question now is: How to choose C?
#The alternative evidence formula depends on the prior only through the value of the prior density at the MLE.
#Since the value of the density of Unif(-C, C) is the same as that of the density Unif(a - C, a + C) for any number a,
#we can think of the prior density of beta_j as being Unif(betahat_j - C, betahat_j + C)
#where betahat is the least squares estimate in the model.
#Now the rule of thumb for choosing C is as follows:
#it should be large enough to cover the region of concentration of the likelihood.
#It should not be too large compared to the region of concentration of the likelihood
#(otherwise, we will be paying attention to irrelevant values of the parameters).
#To illustrate this in the current example, consider, say, the model with k = K = 50 sinusoids that we fitted above:
summary(mod)
K = 50
C = 15
logevidalt = rep(-1, K)
Xin = matrix(1, n, 1)
for(kin in 1:K)
{
Xin = cbind(Xin, cos(2*pi*(kin/n)*tme), sin(2*pi*(kin/n)*tme))
mod = lm(dt ~ -1 + Xin)
p = ncol(Xin)
log.value = ((p - 1 - n)/2)*(log(sum(mod$residuals^2))) - (0.5*(determinant(t(Xin) %*% Xin, logarithm = T)$modulus)) + ((p/2)*(log(pi))) + lgamma((n-p-1)/2)
log.value = log.value - p*(log(2*C))
logevidalt[kin] = log.value
}
logevidalt = logevidalt - max(logevidalt)
evidalt = exp(logevidalt)
evidalt = evidalt/(sum(evidalt))
plot(1:K, evidalt, type = "h")
which.max(evidalt)
evidalt[which.max(evidalt)]
lik1 = function(sigma) {
1/(sqrt(2*pi)*sigma)^10 * exp(-sum(err^2)/2/sigma^2)
}
lik2 = function(sigma) {
1/(2*sigma)^10 * exp(-sum(abs(err))/sigma)
}
lik3 = function(sigma) {
prod = 1
for (i in 1:10) {
term = sigma / (err[i]^2 + sigma^2) / pi
prod = prod * term
}
prod
}
?seq
?sapply
res = .001
my.grid = seq(-15, 15, by=res)
lik1.vals = sapply(my.grid, FUN=lik1)
evid1 = 1/30 * sum(lik1.vals) * res
lik2.vals = sapply(my.grid, FUN=lik2)
evid2 = 1/30 * sum(lik2.vals) * res
lik3.vals = sapply(my.grid, FUN=lik3)
evid3 = 1/30 * sum(lik3.vals) * res
evid1
evid2
evid3
lik1 = function(sigma) {
if (sigma=0) {return(0)} # the formula below is undefined for sigma=0, but the limit is 0
lik1 = function(sigma) {
if (sigma==0) {return(0)} # the formula below is undefined for sigma=0, but the limit is 0
1/(sqrt(2*pi)*sigma)^10 * exp(-sum(err^2)/2/sigma^2)
}
lik2 = function(sigma) {
if (sigma==0) {return(0)}
1/(2*sigma)^10 * exp(-sum(abs(err))/sigma)
}
lik3 = function(sigma) {
prod = 1
for (i in 1:10) {
term = sigma / (err[i]^2 + sigma^2) / pi
prod = prod * term
}
prod
}
res = .001
my.grid = seq(-15, 15, by=res)
lik1.vals = sapply(my.grid, FUN=lik1)
evid1 = 1/30 * sum(lik1.vals) * res
lik2.vals = sapply(my.grid, FUN=lik2)
evid2 = 1/30 * sum(lik2.vals) * res
lik3.vals = sapply(my.grid, FUN=lik3)
evid3 = 1/30 * sum(lik3.vals) * res
evid1
evid2
evid3
lik1 = function(sigma) {
if (sigma==0) {return(0)} # the formula below is undefined for sigma=0, but the limit is 0
1/(sqrt(2*pi)*sigma)^10 * exp(-sum(err^2)/2/sigma^2)
}
lik2 = function(sigma) {
if (sigma==0) {return(0)}
1/(2*sigma)^10 * exp(-sum(abs(err))/sigma)
}
lik3 = function(sigma) {
prod = 1
for (i in 1:10) {
term = sigma / (err[i]^2 + sigma^2) / pi
prod = prod * term
}
prod
}
res = .001
my.grid = seq(-15, 15, by=res)
lik1.vals = sapply(my.grid, FUN=lik1)
evid1 = 1/30 * sum(lik1.vals) * res
lik2.vals = sapply(my.grid, FUN=lik2)
evid2 = 1/30 * sum(lik2.vals) * res
lik3.vals = sapply(my.grid, FUN=lik3)
evid3 = 1/30 * sum(lik3.vals) * res
evid1
evid2
evid3
lik2.vals
sum(lik2.vals == Inf)
c(1:length(lik2.vals))[lik2.vals == Inf]
lik2(0)
lik2(-res)
lik1(-res)
lik1(-2*res)
lik2(-10*res)
lik2(-50*res)
lik2(-200*res)
sum(abs(err))
sum(abs(err))/10
lik2(sum(abs(err))/10)
which.max(lik1.vals)
